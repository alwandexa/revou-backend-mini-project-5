version: "3"

services:
  kong-database:
    image: postgres:9.6
    container_name: kong-database
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kong
    volumes:
      - "db-data-kong-postgres:/var/lib/postgresql/data"

  kong-migrations:
    image: kong
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_PASSWORD=kong
      - KONG_CASSANDRA_CONTACT_POINTS=kong-database
    command: kong migrations bootstrap
    restart: on-failure
    depends_on:
      - kong-database

  kong:
    image: kong
    container_name: kong
    environment:
      - LC_CTYPE=en_US.UTF-8
      - LC_ALL=en_US.UTF-8
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
      - KONG_CASSANDRA_CONTACT_POINTS=kong-database
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
    restart: on-failure
    ports:
      - 8000:8000
      - 8443:8443
      - 8001:8001
      - 8444:8444
    links:
      - kong-database:kong-database
    depends_on:
      - kong-migrations

  konga:
    image: pantsel/konga
    ports:
      - 1337:1337
    links:
      - kong:kong
    container_name: konga
    environment:
      - NODE_ENV=production

  rabbitmq:
    image: rabbitmq:3.8-management
    ports:
      - 5672:5672
      - 15672:15672

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: ./.env
    ports:
      - $USER_SERVICE_LOCAL_PORT:$USER_SERVICE_LOCAL_PORT
    environment:
      - DB_HOST=user-db
      - DB_USER=$USER_DB_USER
      - DB_PASSWORD=$USER_DB_ROOT_PASSWORD
      - DB_NAME=$USER_DB_DATABASE
      - DB_PORT=$USER_DB_DOCKER_PORT
      - APP_PORT=$USER_SERVICE_LOCAL_PORT
    stdin_open: true
    tty: true
    depends_on:
      - user-db
    command: sh -c "npm run start"

  user-db:
    container_name: user-db
    image: mysql:8.0
    restart: unless-stopped
    env_file: ./.env
    environment:
      - MYSQL_ROOT_PASSWORD=$USER_DB_ROOT_PASSWORD
      - MYSQL_DATABASE=$USER_DB_DATABASE
    ports:
      - $USER_DB_LOCAL_PORT:$USER_DB_DOCKER_PORT

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: ./.env
    ports:
      - $ORDER_SERVICE_LOCAL_PORT:$ORDER_SERVICE_LOCAL_PORT
    environment:
      - DB_HOST=order-db
      - DB_USER=$ORDER_DB_ORDER
      - DB_PASSWORD=$ORDER_DB_ROOT_PASSWORD
      - DB_NAME=$ORDER_DB_DATABASE
      - DB_PORT=$ORDER_DB_DOCKER_PORT
      - APP_PORT=$ORDER_SERVICE_LOCAL_PORT
    stdin_open: true
    tty: true
    depends_on:
      - order-db
    command: sh -c "npm run start"

  order-db:
    container_name: order-db
    image: mysql:8.0
    restart: unless-stopped
    env_file: ./.env
    environment:
      - MYSQL_ROOT_PASSWORD=$ORDER_DB_ROOT_PASSWORD
      - MYSQL_DATABASE=$ORDER_DB_DATABASE
    ports:
      - $ORDER_DB_LOCAL_PORT:$ORDER_DB_DOCKER_PORT

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: ./.env
    ports:
      - $INVENTORY_SERVICE_LOCAL_PORT:$INVENTORY_SERVICE_LOCAL_PORT
    environment:
      - DB_HOST=inventory-db
      - DB_USER=$INVENTORY_DB_ORDER
      - DB_PASSWORD=$INVENTORY_DB_ROOT_PASSWORD
      - DB_NAME=$INVENTORY_DB_DATABASE
      - DB_PORT=$INVENTORY_DB_DOCKER_PORT
      - APP_PORT=$INVENTORY_SERVICE_LOCAL_PORT
    stdin_open: true
    tty: true
    depends_on:
      - inventory-db
    command: sh -c "npm run start"

  inventory-db:
    container_name: inventory-db
    image: mysql:8.0
    restart: unless-stopped
    env_file: ./.env
    environment:
      - MYSQL_ROOT_PASSWORD=$INVENTORY_DB_ROOT_PASSWORD
      - MYSQL_DATABASE=$INVENTORY_DB_DATABASE
    ports:
      - $INVENTORY_DB_LOCAL_PORT:$INVENTORY_DB_DOCKER_PORT

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: ./.env
    ports:
      - $NOTIFICATION_SERVICE_LOCAL_PORT:$NOTIFICATION_SERVICE_LOCAL_PORT
    environment:
      - DB_HOST=notification-db
      - DB_USER=$NOTIFICATION_DB_ORDER
      - DB_PASSWORD=$NOTIFICATION_DB_ROOT_PASSWORD
      - DB_NAME=$NOTIFICATION_DB_DATABASE
      - DB_PORT=$NOTIFICATION_DB_DOCKER_PORT
      - APP_PORT=$NOTIFICATION_SERVICE_LOCAL_PORT
    stdin_open: true
    tty: true
    depends_on:
      - notification-db
    command: sh -c "npm run start"

  notification-db:
    container_name: notification-db
    image: mysql:8.0
    restart: unless-stopped
    env_file: ./.env
    environment:
      - MYSQL_ROOT_PASSWORD=$NOTIFICATION_DB_ROOT_PASSWORD
      - MYSQL_DATABASE=$NOTIFICATION_DB_DATABASE
    ports:
      - $NOTIFICATION_DB_LOCAL_PORT:$NOTIFICATION_DB_DOCKER_PORT

volumes:
  db-data-kong-postgres:

networks:
  default:
    name: kong-net
    external: true
